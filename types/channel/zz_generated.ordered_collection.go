// Code generated by gen-functions; DO NOT EDIT.

package channel

import (
	"github.com/genkami/dogs/classes/algebra"
	"github.com/genkami/dogs/classes/cmp"
	"github.com/genkami/dogs/types/iterator"
	"github.com/genkami/dogs/types/pair"
)

// Some packages are unused depending on -include CLI option.
// This prevents compile error when corresponding functions are not defined.
var _ = (algebra.Monoid[int])(nil)
var _ = (cmp.Ord[int])(nil)
var _ = (iterator.Iterator[int])(nil)
var _ = (*pair.Pair[int, int])(nil)

// FindElemIndex returns a first index of an element in xs that equals to e in the sense of given Eq.
// It returns negative value if no elements are found.
func FindElemIndex[T any](eq cmp.Eq[T]) func(xs Chan[T], e T) int {
	return func(xs Chan[T], e T) int {
		return iterator.FindElemIndex[T](eq)(xs.Iter(), e)
	}
}

// FindIndex returns a first index of an element in xs that satisfies the given predicate fn.
// It returns negative value if no elements are found.
func FindIndex[T any](xs Chan[T], fn func(T) bool) int {
	return iterator.FindIndex[T](xs.Iter(), fn)
}

// Zip combines two collections into one that contains pairs of corresponding elements.
func Zip[T, U any](a Chan[T], b Chan[U]) Chan[pair.Pair[T, U]] {
	return FromIterator[pair.Pair[T, U]](iterator.Zip(a.Iter(), b.Iter()))
}
