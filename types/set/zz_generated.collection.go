// Code generated by gen-functions; DO NOT EDIT.

package set

import (
	"github.com/genkami/dogs/classes/algebra"
	"github.com/genkami/dogs/classes/cmp"
	"github.com/genkami/dogs/types/iterator"
	"github.com/genkami/dogs/types/pair"
)

// Some packages are unused depending on -include CLI option.
// This prevents compile error when corresponding functions are not defined.
var _ = (algebra.Monoid[int])(nil)
var _ = (cmp.Ord[int])(nil)
var _ = (iterator.Iterator[int])(nil)
var _ = (*pair.Pair[int, int])(nil)

// Filter returns a collection that only returns elements that satisfies given predicate.
func Filter[T comparable](xs Set[T], fn func(T) bool) Set[T] {
	return FromIterator[T](iterator.Filter[T](xs.Iter(), fn))
}

// Find returns a first element in xs that satisfies the given predicate fn.
// It returns false as a second return value if no elements are found.
func Find[T comparable](xs Set[T], fn func(T) bool) (T, bool) {
	return iterator.Find[T](xs.Iter(), fn)
}

// FindElem returns a first element in xs that equals to e in the sense of given Eq.
// It returns false as a second return value if no elements are found.
func FindElem[T comparable](eq cmp.Eq[T]) func(xs Set[T], e T) (T, bool) {
	return func(xs Set[T], e T) (T, bool) {
		return iterator.FindElem[T](eq)(xs.Iter(), e)
	}
}

// Fold accumulates every element in a collection by applying fn.
func Fold[T any, U comparable](init T, xs Set[U], fn func(T, U) T) T {
	return iterator.Fold[T, U](init, xs.Iter(), fn)
}

// ForEach applies fn to each element in xs.
func ForEach[T comparable](xs Set[T], fn func(T)) {
	iterator.ForEach[T](xs.Iter(), fn)
}

// Map returns a collection that applies fn to each element of xs.
func Map[T, U comparable](xs Set[T], fn func(T) U) Set[U] {
	return FromIterator[U](iterator.Map[T, U](xs.Iter(), fn))
}

// Max returns the largest element with respect to the given Ord.
// It returns <zero value>, false if the collection is empty.
func Max[T comparable](ord cmp.Ord[T]) func(xs Set[T]) (T, bool) {
	return func(xs Set[T]) (T, bool) {
		return iterator.Max(ord)(xs.Iter())
	}
}

// MaxBy returns the smallest element with respect to the given function.
// It returns <zero value>, false if the collection is empty.
func MaxBy[T comparable](xs Set[T], less func(T, T) bool) (T, bool) {
	return iterator.MaxBy(xs.Iter(), less)
}

// Min returns the smallest element with respect to the given Ord.
// It returns <zero value>, false if the collection is empty.
func Min[T comparable](ord cmp.Ord[T]) func(xs Set[T]) (T, bool) {
	return func(xs Set[T]) (T, bool) {
		return iterator.Min(ord)(xs.Iter())
	}
}

// MinBy returns the smallest element with respect to the given function.
// It returns <zero value>, false if the collection is empty.
func MinBy[T comparable](xs Set[T], less func(T, T) bool) (T, bool) {
	return iterator.MinBy(xs.Iter(), less)
}

// Sum sums up all values in xs.
// It returns m.Empty() when xs is empty.
func Sum[T comparable](m algebra.Monoid[T]) func(xs Set[T]) T {
	return func(xs Set[T]) T {
		var s algebra.Semigroup[T] = m
		return SumWithInit[T](s)(m.Empty(), xs)
	}
}

// SumWithInit sums up init and all values in xs.
func SumWithInit[T comparable](s algebra.Semigroup[T]) func(init T, xs Set[T]) T {
	return func(init T, xs Set[T]) T {
		return Fold[T, T](init, xs, s.Combine)
	}
}
